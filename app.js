// helpers
const $ = s => document.querySelector(s);
const $$ = s => Array.from(document.querySelectorAll(s));
const money = v => '‚Ç∏' + Math.round(v || 0).toLocaleString('ru-RU');

// –≥–µ–æ–¥–∏—Å—Ç–∞–Ω—Ü–∏—è
const hav = (a, b) => {
  const R = 6371, toRad = x => x * Math.PI / 180;
  const dLat = toRad(b.lat - a.lat), dLon = toRad(b.lng - a.lng);
  const s = Math.sin(dLat/2)**2 + Math.cos(toRad(a.lat)) * Math.cos(toRad(b.lat)) * Math.sin(Math.abs(dLon)/2)**2;
  return 2 * R * Math.asin(Math.sqrt(s));
};

const state = {
  items: [],
  categories: [],
  conf: null,
  activeCategory: null,
  cart: JSON.parse(localStorage.getItem('wingo.cart') || '[]'),
  geo: JSON.parse(localStorage.getItem('wingo.geo') || '{"status":"unknown","inside":false}'),
  mode: 'delivery',
  sheetItem: null,
  sheetQty: 1,
  // –¢–û–õ–¨–ö–û –≤—Ö–æ–¥—è—â–∏–µ –¥–∏–ø—ã (–±–µ–∑ –¥–æ–ø. –¥–∏–ø–æ–≤)
  select: { flavors: [], garnish: null, drink: null, dipCounts: {} }
};

const el = {
  tabs: $('#tabs'),
  grid: $('#grid'),
  sheet: $('#sheet'),
  sheetBackdrop: $('#sheetBackdrop'),
  sheetClose: $('#sheetClose'),
  sheetImg: $('#sheetImg'),
  sheetTitle: $('#sheetTitle'),
  sheetPrice: $('#sheetPrice'),
  sheetDesc: $('#sheetDesc'),

  flavorBlock: $('#flavorBlock'),
  flavorOptions: $('#flavorOptions'),
  flavorMax: $('#flavorMax'),
  flavorHint: $('#flavorHint'),

  garnishBlock: $('#garnishBlock'),
  garnishOptions: $('#garnishOptions'),

  dipsBlock: $('#dipsBlock'),
  dipsInfo: $('#dipsInfo'),
  dipsChoice: $('#dipsChoice'),
  dipsLeftHint: $('#dipsLeftHint'),

  qtyMinus: $('#qtyMinus'),
  qtyPlus: $('#qtyPlus'),
  qtyValue: $('#qtyValue'),
  addToCart: $('#addToCart'),

  cartBar: $('#cartBar'),
  cartOpenArea: $('#cartOpenArea'),
  cartCount: $('#cartCount'),
  cartTotal: $('#cartTotal'),
  openCheckout: $('#openCheckout'),

  checkout: $('#checkout'),
  coBackdrop: $('#coBackdrop'),
  coClose: $('#coClose'),
  coName: $('#coName'),
  coPhone: $('#coPhone'),
  addressGroup: $('#addressGroup'),
  coStreet: $('#coStreet'),
  coHouse: $('#coHouse'),
  coFloor: $('#coFloor'),
  coApt: $('#coApt'),
  coNote: $('#coNote'),
  coSummary: $('#coSummary'),
  coTotal: $('#coTotal'),
  coWhatsApp: $('#coWhatsApp'),

  hoursState: $('#hoursState'),
  geoBtn: $('#geoBtn'),
  geoBanner: $('#geoBanner'),
  deliveryMode: $('#deliveryMode'),
  modeSegment: $('#modeSegment')
};

// ‚îÄ‚îÄ‚îÄ –ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function getHeaderOffsetPx() {
  const header = document.querySelector('.header, header');
  if (!header) return 0;
  const cs = getComputedStyle(header);
  if (cs.position === 'fixed' || cs.position === 'sticky') {
    return header.offsetHeight || 0;
  }
  return 0;
}
function ensureNoticeVisible(elm) {
  if (!elm) return;
  elm.scrollIntoView({ block: 'start', behavior: 'smooth' });
  const ho = getHeaderOffsetPx();
  if (ho) {
    setTimeout(() => {
      // instant, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
      window.scrollBy({ top: -ho - 8, left: 0, behavior: 'instant' });
    }, 250);
  }
}
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

// –∑–∞–≥—Ä—É–∑–∫–∞
async function loadAll() {
  try {
    const [m, c] = await Promise.all([
      fetch('menu.json?v=21'),
      fetch('config.json?v=21')
    ]);
    const menu = await m.json();
    state.items = menu.items || [];
    state.conf = await c.json();
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥/–º–µ–Ω—é', e);
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ config.json –∏ menu.json ‚Äî –≤–∞–ª–∏–¥–Ω—ã–π JSON (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤).');
    return;
  }

  setupHours();
  buildCategories();
  renderGrid();
  updateCartBar();
  updateGeoUI();
}

function setupHours(){
  const now = new Date();
  const [oh, om] = state.conf.business_hours.daily.open.split(':').map(Number);
  const [ch, cm] = state.conf.business_hours.daily.close.split(':').map(Number);
  const open = new Date(now); open.setHours(oh, om, 0, 0);
  const close = new Date(now); close.setHours(ch, cm, 0, 0);
  const isOpen = now >= open && now <= close;
  el.hoursState.textContent = (isOpen ? '–û—Ç–∫—Ä—ã—Ç–æ ¬∑ ' : '–ó–∞–∫—Ä—ã—Ç–æ ¬∑ ') + state.conf.business_hours.daily.open + '‚Äì' + state.conf.business_hours.daily.close;
}

function buildCategories(){
  const set = new Set(state.items.map(i => i.category));
  state.categories = [...set];
  el.tabs.innerHTML = '';
  state.categories.forEach((cat, i) => {
    const a = document.createElement('a');
    a.href = '#';
    a.textContent = cat;
    a.className = (state.activeCategory ? (state.activeCategory===cat) : i===0) ? 'active' : '';
    a.onclick = e => {
      e.preventDefault();
      state.activeCategory = cat;
      renderGrid();
      $$('#tabs a').forEach(n => n.classList.toggle('active', n.textContent === cat));
    };
    el.tabs.appendChild(a);
  });
}

function renderGrid(){
  const list = state.activeCategory ? state.items.filter(i => i.category === state.activeCategory) : state.items;
  el.grid.innerHTML = '';
  const frag = document.createDocumentFragment();
  list.forEach(item => {
    const card = document.createElement('div'); card.className = 'card';
    const img = document.createElement('img'); img.className='thumb'; img.src=item.image||'images/placeholder.png'; img.alt=item.name;
    const body = document.createElement('div'); body.className='card-body';
    const title = document.createElement('div'); title.className='title'; title.textContent=item.name;
    const actions = document.createElement('div'); actions.className='actions';
    const price = document.createElement('div'); price.className='price'; price.textContent=money(item.price);
    const btn = document.createElement('button'); btn.className='btn'; btn.textContent='–í—ã–±—Ä–∞—Ç—å';
    btn.onclick = () => openSheet(item);
    card.onclick = () => openSheet(item);
    actions.append(price, btn);
    body.append(title, actions);
    card.append(img, body);
    frag.append(card);
  });
  el.grid.append(frag);
}

// –∫–∞—Ä—Ç–æ—á–∫–∞
function openSheet(item){
  state.sheetItem = item;
  state.sheetQty = 1;
  state.select = { flavors: [], garnish: null, drink: null, dipCounts: {} };

  el.sheetImg.src = item.image || 'images/placeholder.png';
  el.sheetTitle.textContent = item.name;
  el.sheetPrice.textContent = money(item.price);
  el.sheetDesc.textContent = item.description || '';
  el.qtyValue.textContent = state.sheetQty;

  // –≤–∫—É—Å—ã
  if(item.flavors_max){
    el.flavorBlock.style.display = '';
    el.flavorMax.textContent = item.flavors_max;
    el.flavorOptions.innerHTML = '';
    (state.conf.cooking_flavors || []).forEach(fl => {
      const o = document.createElement('button');
      o.className = 'opt flavor';
      o.setAttribute('aria-pressed','false');
      const name = typeof fl === 'string' ? fl : (fl.name || '');
      const heat = typeof fl === 'object' && typeof fl.heat === 'number' ? fl.heat : 0;
      const color = typeof fl === 'object' && fl.color ? fl.color : '';
      const peppers = 'üå∂'.repeat(Math.max(0, Math.min(3, heat)));
      o.innerHTML = `<span class="dot" style="${color?`background:${color}`:''}"></span><span class="nm">${name}</span><span class="heat">${peppers}</span>`;
      o.onclick = () => {
        const i = state.select.flavors.indexOf(name);
        if(i > -1){
          state.select.flavors.splice(i,1);
          o.classList.remove('active');
          o.setAttribute('aria-pressed','false');
        } else if(state.select.flavors.length < item.flavors_max){
          state.select.flavors.push(name);
          o.classList.add('active');
          o.setAttribute('aria-pressed','true');
        }
        updateFlavorHint(item);
      };
      el.flavorOptions.appendChild(o);
    });
    updateFlavorHint(item);
  } else {
    el.flavorBlock.style.display = 'none';
  }

  // –≥–∞—Ä–Ω–∏—Ä
  if(item.garnish && item.garnish.options && item.garnish.options.length){
    el.garnishBlock.style.display='';
    el.garnishOptions.innerHTML='';
    item.garnish.options.forEach((g, idx) => {
      const o = document.createElement('button');
      o.className = 'opt' + (idx===0 ? ' active' : '');
      o.textContent = g;
      if(idx===0) state.select.garnish = g;
      o.onclick = () => {
        state.select.garnish = g;
        [...el.garnishOptions.children].forEach(n => n.classList.toggle('active', n===o));
      };
      el.garnishOptions.appendChild(o);
    });
  } else {
    el.garnishBlock.style.display='none';
  }

  // ‚îÄ‚îÄ‚îÄ –ù–∞–ø–∏—Ç–æ–∫ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–∑–∏—Ü–∏–∏ –µ—Å—Ç—å –æ–ø—Ü–∏–∏ –Ω–∞–ø–∏—Ç–∫–∞) ‚îÄ‚îÄ‚îÄ
  // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: item.drink.options –∏–ª–∏ item.drinks (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
  const drinkOptionsData = (item.drink && Array.isArray(item.drink.options))
    ? item.drink.options
    : (Array.isArray(item.drinks) ? item.drinks : []);
  // —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫, –µ—Å–ª–∏ –±—ã–ª
  const prevDrinkBlock = document.getElementById('drinkBlock');
  if (prevDrinkBlock) prevDrinkBlock.remove();

  if (drinkOptionsData.length) {
    const block = document.createElement('div');
    block.id = 'drinkBlock';
    block.className = 'section'; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å; –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç .opt

    const title = document.createElement('div');
    title.className = 'section-title';
    title.textContent = '–ù–∞–ø–∏—Ç–æ–∫';
    block.appendChild(title);

    const wrap = document.createElement('div');
    wrap.id = 'drinkOptions';
    block.appendChild(wrap);

    drinkOptionsData.forEach((dName, idx) => {
      const btn = document.createElement('button');
      btn.className = 'opt' + (idx===0 ? ' active' : '');
      btn.textContent = (typeof dName === 'string') ? dName : (dName?.name || '');
      if (idx===0) state.select.drink = btn.textContent;
      btn.onclick = () => {
        state.select.drink = btn.textContent;
        [...wrap.children].forEach(n => n.classList.toggle('active', n===btn));
      };
      wrap.appendChild(btn);
    });

    // –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –¥–∏–ø–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å; –∏–Ω–∞—á–µ ‚Äî –≤ –∫–æ–Ω–µ—Ü –º–æ–¥–∞–ª–∫–∏
    if (el.dipsBlock && el.dipsBlock.parentNode) {
      el.dipsBlock.parentNode.insertBefore(block, el.dipsBlock);
    } else {
      el.sheet.appendChild(block);
    }
  }
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  // –í–•–û–î–Ø–©–ò–ï –¥–∏–ø—ã (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—á—ë—Ç—á–∏–∫–∞–º)
  if(typeof item.dips_included === 'number'){
    el.dipsBlock.style.display='';
    el.dipsInfo.textContent = `–í—Ö–æ–¥–∏—Ç: ${item.dips_included} –¥–∏–ø` + (item.dips_included===1?'':'–æ–≤');
    buildIncludedDipsUI(item);
  } else {
    el.dipsBlock.style.display='none';
    el.dipsChoice.innerHTML='';
    el.dipsLeftHint.textContent='';
  }

  el.cartBar.classList.add('hidden');
  el.sheet.classList.add('show'); el.sheet.setAttribute('aria-hidden','false');
}
function updateFlavorHint(item){
  const max = item.flavors_max || 1;
  const n = state.select.flavors.length;
  el.flavorHint.textContent = `${n}/${max} –≤—ã–±—Ä–∞–Ω–æ`;
}

// –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π UI –¥–ª—è –í–•–û–î–Ø–©–ò–• –¥–∏–ø–æ–≤ (–Ω–∏–∫–∞–∫–∏—Ö ¬´–¥–æ–ø. –¥–∏–ø–æ–≤¬ª!)
function buildIncludedDipsUI(item){
  const dips = state.conf.dip_flavors || [];
  el.dipsChoice.innerHTML = '';
  el.dipsChoice.classList.remove('dips-grid'); // –Ω–∞ –≤—Å—è–∫–∏–π
  state.select.dipCounts = {};

  const getAssigned = () => Object.values(state.select.dipCounts).reduce((a,b)=>a+(b||0),0);
  const max = item.dips_included || 0;

  dips.forEach(name => {
    state.select.dipCounts[name] = 0;

    const row = document.createElement('div');
    row.className = 'dip-row';
    row.innerHTML = `
      <div class="dip-name">${name}</div>
      <div class="dip-ctr">
        <button class="dip-btn minus" type="button" aria-label="–£–º–µ–Ω—å—à–∏—Ç—å">‚àí</button>
        <span class="dip-count">0</span>
        <button class="dip-btn plus" type="button" aria-label="–£–≤–µ–ª–∏—á–∏—Ç—å">+</button>
      </div>`;

    const minus = row.querySelector('.minus');
    const plus = row.querySelector('.plus');
    const cEl = row.querySelector('.dip-count');

    const updateActive = ()=>{
      const val = state.select.dipCounts[name] || 0;
      cEl.textContent = val;
      row.classList.toggle('active', val>0);
    };

    const inc = ()=>{
      const assigned = getAssigned();
      if(assigned >= max) return;
      state.select.dipCounts[name] = (state.select.dipCounts[name]||0) + 1;
      updateActive();
      const left = max - getAssigned();
      el.dipsLeftHint.textContent = left>0 ? `–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å: ${left}` : '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
    };
    const dec = ()=>{
      const cur = state.select.dipCounts[name] || 0;
      if(cur>0){ state.select.dipCounts[name] = cur - 1; }
      updateActive();
      const left = max - getAssigned();
      el.dipsLeftHint.textContent = left>0 ? `–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å: ${left}` : '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
    };

    minus.addEventListener('click', dec);
    plus.addEventListener('click', inc);

    el.dipsChoice.appendChild(row);
  });

  el.dipsLeftHint.textContent = max>0 ? `–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å: ${max}` : '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
}

// –∑–∞–∫—Ä—ã—Ç–∏–µ —à–∏—Ç–∞
el.sheetClose.onclick = () => closeSheet();
el.sheetBackdrop.onclick = () => closeSheet();
function closeSheet(){
  el.sheet.classList.remove('show');
  el.sheet.setAttribute('aria-hidden','true');
  el.cartBar.classList.remove('hidden');
}

// qty
el.qtyMinus.onclick = () => { if(state.sheetQty>1){ state.sheetQty--; el.qtyValue.textContent = state.sheetQty; } };
el.qtyPlus.onclick = () => { state.sheetQty++; el.qtyValue.textContent = state.sheetQty; };

// add to cart
el.addToCart.onclick = () => {
  const it = state.sheetItem; if(!it) return;
  if(it.flavors_max && state.select.flavors.length===0){ alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –≤–∫—É—Å'); return; }

  const key = [
    it.id||it.name,
    (state.select.flavors||[]).join('+'),
    state.select.garnish||'',
    state.select.drink||''
  ].join('|');

  const ex = state.cart.find(c => c.key === key);
  const itemPayload = {
    key,
    id: it.id || it.name,
    name: it.name,
    basePrice: it.price,
    qty: state.sheetQty,
    flavors: [...(state.select.flavors||[])],
    garnish: state.select.garnish || null,
    drink: state.select.drink || null,
    // —Ç–æ–ª—å–∫–æ –í–•–û–î–Ø–©–ò–ï –¥–∏–ø—ã
    dips_included: it.dips_included || 0,
    dips_breakdown: state.select.dipCounts
  };
  if(ex){ ex.qty += state.sheetQty; }
  else { state.cart.push(itemPayload); }

  localStorage.setItem('wingo.cart', JSON.stringify(state.cart));
  updateCartBar(); closeSheet();
};

// cart bar
function updateCartBar(){
  const count = state.cart.reduce((a,c)=>a+c.qty,0);
  const total = state.cart.reduce((a,c)=>a + c.qty * c.basePrice, 0);
  el.cartCount.textContent = count + ' –ø–æ–∑.';
  el.cartTotal.textContent = money(total);
}
el.openCheckout.onclick = () => openCheckout();
el.cartOpenArea.onclick = () => openCheckout();

function openCheckout(){
  // —Ç—Ä–µ–±—É–µ–º –≥–µ–æ–ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
  if (state.geo && state.geo.status === 'unknown') {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É¬ª –≤–≤–µ—Ä—Ö—É.');
    return;
  }
  // —Ä–µ–∂–∏–º –ø–æ –≥–µ–æ
  state.mode = state.geo.inside ? 'delivery' : 'pickup';
  updateModeUI();
  if(!el.coPhone.value){ el.coPhone.value = '+7'; }
  el.checkout.classList.add('show'); el.checkout.setAttribute('aria-hidden','false');
  renderCoSummary();
}
el.coClose.onclick = () => { el.checkout.classList.remove('show'); el.checkout.setAttribute('aria-hidden','true'); };
el.coBackdrop.onclick = () => { el.checkout.classList.remove('show'); el.checkout.setAttribute('aria-hidden','true'); };

el.modeSegment.addEventListener('click', e=>{
  const btn = e.target.closest('.seg'); if(!btn) return;
  const mode = btn.getAttribute('data-mode');
  if(mode==='delivery' && state.geo && state.geo.status==='unknown'){ alert('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É¬ª.'); return; }
  if(mode==='delivery' && state.geo.status==='outside'){ alert('–í—ã –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏. –î–æ—Å—Ç—É–ø–µ–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑.'); return; }
  state.mode = mode; updateModeUI();
});
function updateModeUI(){
  if(state.mode==='delivery'){
    el.deliveryMode.textContent = '–†–µ–∂–∏–º: –î–æ—Å—Ç–∞–≤–∫–∞';
    el.addressGroup.style.display='';
  } else {
    el.deliveryMode.textContent = '–†–µ–∂–∏–º: –°–∞–º–æ–≤—ã–≤–æ–∑ ‚Äî ' + (state.conf.pickup?.address || '');
    el.addressGroup.style.display='none';
  }
  $$('#modeSegment .seg').forEach(b => b.classList.toggle('active', b.getAttribute('data-mode')===state.mode));
}

function renderCoSummary(){
  if(state.cart.length===0){ el.coSummary.innerHTML='<em>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</em>'; el.coTotal.textContent=money(0); return; }
  const lines = state.cart.map(c=>{
    const extras=[];
    if(c.flavors?.length) extras.push('–≤–∫—É—Å: '+c.flavors.join(' + '));
    if(c.garnish) extras.push('–≥–∞—Ä–Ω–∏—Ä: '+c.garnish);
    if(c.drink) extras.push('–Ω–∞–ø–∏—Ç–æ–∫: '+c.drink);
    if(c.dips_included){
      extras.push('–≤—Ö–æ–¥–∏—Ç –¥–∏–ø–æ–≤: '+c.dips_included);
      const pairs = Object.entries(c.dips_breakdown||{}).filter(([_,v])=>v>0).map(([k,v])=>`${k}√ó${v}`);
      if(pairs.length) extras.push('–¥–∏–ø—ã: '+pairs.join(', '));
    }
    const sum = c.qty * c.basePrice;
    return `<div class="co-item" data-key="${c.key}">
      <div class="co-title">${c.name}${extras.length?' ('+extras.join(', ')+')':''}</div>
      <div class="co-controls">
        <button class="qtybtn minus" data-k="${c.key}">‚àí</button>
        <span class="q">${c.qty}</span>
        <button class="qtybtn plus" data-k="${c.key}">+</button>
        <span class="s">${money(sum)}</span>
      </div>
    </div>`;
  }).join('');
  const total = state.cart.reduce((a,c)=>a + c.qty * c.basePrice, 0);
  el.coSummary.innerHTML = lines;
  el.coTotal.textContent = money(total);

  el.coSummary.querySelectorAll('.qtybtn.minus').forEach(b=>b.onclick=()=>{
    const k=b.getAttribute('data-k');
    const i=state.cart.findIndex(c=>c.key===k);
    if(i>-1){
      if(state.cart[i].qty>1) state.cart[i].qty--; else state.cart.splice(i,1);
      localStorage.setItem('wingo.cart', JSON.stringify(state.cart));
      renderCoSummary(); updateCartBar();
    }
  });
  el.coSummary.querySelectorAll('.qtybtn.plus').forEach(b=>b.onclick=()=>{
    const k=b.getAttribute('data-k');
    const i=state.cart.findIndex(c=>c.key===k);
    if(i>-1){
      state.cart[i].qty++;
      localStorage.setItem('wingo.cart', JSON.stringify(state.cart));
      renderCoSummary(); updateCartBar();
    }
  });
}

// ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –±–∞–Ω–Ω–µ—Ä–µ –≥–µ–æ (—Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º, –∞–¥—Ä–µ—Å–æ–º –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function updateGeoUI(){
  const b = el.geoBanner, g = state.geo;
  const d = (typeof g.distanceKm === 'number' && isFinite(g.distanceKm)) ? g.distanceKm : null;
  const dStr = d !== null ? ` ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${d.toFixed(1)} –∫–º` : '';

  if(g.status==='inside'){
    b.className='geo-banner ok';
    b.textContent=`–î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ —Å —É–ª–∏—Ü—ã –ë–∞–ª–∫–∞–Ω—Ç–∞—É 94${dStr}.`;
  }
  else if(g.status==='outside'){
    b.className='geo-banner bad';
    const pickupAddr = state.conf.pickup?.address || '';
    b.textContent=`–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞${dStr} (–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω—ã), –Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑${pickupAddr ? ' ‚Äî ' + pickupAddr : ''}.`;
  }
  else if(g.status==='denied'){
    b.className='geo-banner bad';
    b.textContent='–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
  }
  else {
    b.className='geo-banner';
    b.textContent='';
  }
}
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

el.geoBtn && (el.geoBtn.onclick = () => {
  if(!navigator.geolocation){ alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'); return; }
  el.geoBtn.disabled = true; el.geoBtn.textContent='–ü—Ä–æ–≤–µ—Ä—è–µ–º...';
  navigator.geolocation.getCurrentPosition(pos=>{
    const pt = {lat: pos.coords.latitude, lng: pos.coords.longitude};
    const base = state.conf.delivery.center;
    const radius = state.conf.delivery.radius_km || 1.5;
    const d = hav(base, pt);
    state.geo.distanceKm = d;
    state.geo.inside = d <= radius;
    state.geo.status = state.geo.inside ? 'inside' : 'outside';
    localStorage.setItem('wingo.geo', JSON.stringify(state.geo));
    updateGeoUI();
    // –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É
    ensureNoticeVisible(el.geoBanner);
    el.geoBtn.disabled=false; el.geoBtn.textContent='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É';
  }, err=>{
    state.geo.status='denied'; state.geo.inside=false; updateGeoUI();
    // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ/–æ—Ç–∫–∞–∑–µ
    ensureNoticeVisible(el.geoBanner);
    el.geoBtn.disabled=false; el.geoBtn.textContent='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É';
  }, {enableHighAccuracy:true, timeout:7000, maximumAge:30000});
});

// WhatsApp
function makeWAOrderLink(){
  const phone = state.conf.whatsapp_number;
  const lines = state.cart.map(c=>{
    const extras=[];
    if(c.flavors?.length) extras.push('–≤–∫—É—Å: '+c.flavors.join(' + '));
    if(c.garnish) extras.push('–≥–∞—Ä–Ω–∏—Ä: '+c.garnish);
    if(c.drink) extras.push('–Ω–∞–ø–∏—Ç–æ–∫: '+c.drink);
    if(c.dips_included){
      extras.push('–≤—Ö–æ–¥–∏—Ç –¥–∏–ø–æ–≤: '+c.dips_included);
      const pairs = Object.entries(c.dips_breakdown||{}).filter(([_,v])=>v>0).map(([k,v])=>`${k}√ó${v}`);
      if(pairs.length) extras.push('–¥–∏–ø—ã: '+pairs.join(', '));
    }
    const sum = Math.round(c.qty * c.basePrice);
    return `- ${c.name}${extras.length?' ('+extras.join(' + ')+')':''} √ó ${c.qty} = ${sum} ‚Ç∏`;
  }).join('%0A');
  const total = Math.round(state.cart.reduce((a,c)=>a + c.qty * c.basePrice, 0));

  let addr = '';
  if(state.mode==='delivery'){
    const street=(el.coStreet.value||'').trim();
    const house=(el.coHouse.value||'').trim();
    const floor=(el.coFloor.value||'').trim();
    const apt=(el.coApt.value||'').trim();
    if(!street||!house){ alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –∏ –¥–æ–º.'); throw new Error('address missing'); }
    addr = `—É–ª. ${street}, –¥. ${house}${floor?`, —ç—Ç. ${floor}`:''}${apt?`, –∫–≤. ${apt}`:''}`;
  }

  const name = encodeURIComponent((el.coName.value||'').trim());
  const phoneText = encodeURIComponent((el.coPhone.value||'').trim());
  const mode = state.mode==='delivery' ? '–î–æ—Å—Ç–∞–≤–∫–∞' : ('–°–∞–º–æ–≤—ã–≤–æ–∑ ‚Äî ' + (state.conf.pickup?.address||'')); 
  const addrEnc = encodeURIComponent(addr);
  const note = encodeURIComponent((el.coNote.value||'').trim());
  const text = `–ó–∞–∫–∞–∑ WINGO:%0A${lines}%0A–ò—Ç–æ–≥–æ: ${total} ‚Ç∏%0A–†–µ–∂–∏–º: ${mode}%0A–ò–º—è: ${name}%0A–¢–µ–ª: ${phoneText}%0A–ê–¥—Ä–µ—Å: ${addrEnc}%0A–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${note}`;
  return `https://wa.me/${phone}?text=${text}${state.conf.utm}`;
}
el.coWhatsApp.onclick = () => {
  if(state.cart.length===0){ alert('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É'); return; }
  if (state.geo && state.geo.status === 'unknown') { alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É¬ª.'); return; }
  try{ window.open(makeWAOrderLink(), '_blank', 'noopener'); }catch(e){}
};

// init
loadAll();
